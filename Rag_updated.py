from outils import *
from qdrant_client import QdrantClient
from langchain_groq import ChatGroq
from qdrant_client.models import VectorParams, Distance
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Qdrant
from langchain.chains import RetrievalQA
from constants import *
from operator import itemgetter
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate

# Connexion √† Qdrant avec les variables charg√©es
client = QdrantClient(QDRANT_URL, api_key=QDRANT_API)

# Mod√®les Groq
llm1 = ChatGroq(groq_api_key=GROQ_API_KEY, model_name=LLM_NAME_1)
llm2 = ChatGroq(groq_api_key=GROQ_API_KEY, model_name=LLM_NAME_2)


# Charger le mod√®le d'embeddings
embedding_model = HuggingFaceEmbeddings(model_name=MODEL_EMBEDDING)

# R√©cup√©rer la dimension du mod√®le
vector_size = embedding_model.client.get_sentence_embedding_dimension()

if not client.collection_exists(QDRANT_COLLECTION):
   client.create_collection(
      collection_name=QDRANT_COLLECTION,
      vectors_config=VectorParams(size=vector_size, distance=Distance.COSINE),
   )

# Ajouter les documents √† Qdrant
vectorstore = Qdrant(
    client=client,
    collection_name=QDRANT_COLLECTION,
    embeddings=embedding_model,
)

info = client.get_collection(QDRANT_COLLECTION)
print(f"üìä Nombre de vecteurs enregistr√©s : {info.points_count}")


def process_and_store_file(file_path,lang):
    """Extrait le texte d'un fichier et l'ajoute dans Qdrant."""
    extractedText = extract_text(file_path,lang)  # Ta fonction d'extraction
    print(extractedText)

    if extractedText:
        vectorstore.add_texts([extractedText])
        print(f"üì• Texte extrait et stock√© depuis {file_path} ‚úÖ")
    else:
        print(f"‚ö†Ô∏è Aucun texte extrait depuis {file_path} ‚ùå")


retriever = vectorstore.as_retriever()

#qa_chain_1 = RetrievalQA.from_chain_type(llm=llm1, retriever=retriever, return_source_documents=True)
qa_chain_2 = RetrievalQA.from_chain_type(llm=llm2, retriever=retriever, return_source_documents=True)


# Exemple d'ajout de fichier
#files=["/content/ECHOUROUKELYAOUMI131020241a.pdf","/content/ELDJAZAIRELDJADIDA131020241a.pdf","/content/RadioOuargla141020241a.mp3","/content/Eliktisadia131020241a.mp4"]

files=["CHAINE1010920241a.mp3"]
langue="ar"
"""for file in files:
    process_and_store_file(file,langue)
    print("file proccessed")
"""

template = """Ta t√¢che est essentielle et n√©cessite une pr√©cision absolue. Suis ces r√®gles imp√©rativement :  

- **Ne t'√©loigne jamais du contexte fourni.** Toute information doit en provenir directement.  
- **Ne donne jamais ton avis et ne fais aucune supposition.**  
- **Respecte la langue demand√©e √† 100 %.**  
- Si une question est pos√©e, r√©ponds-y clairement et directement.  
- Si un r√©sum√© est demand√©, il doit √™tre **pr√©cis, structur√© et √©quilibr√©** :  
    - **Inclure toutes les informations essentielles** sans en oublier.  
    - **Ni trop long, ni trop court.**  
    - **Sans introduction ("Voici un r√©sum√©", etc.).**  
    - **Couvrir implicitement ces √©l√©ments** :  
      - **Ce qui s'est pass√©**  
      - **Qui est impliqu√©**  
      - **Quand, o√π et pourquoi cela a eu lieu**  
      - **Comment cela s'est d√©roul√©**  
- **Ne jamais ajouter de d√©tails en dehors du contexte.**  

Contexte :  
{context}  

Question : {question}  

R√©ponse (strictement en {language}) :  
"""

prompt = ChatPromptTemplate.from_template(template)

chain = (
    {
        "context": itemgetter("context"),
        "question": itemgetter("question"),
        "language": itemgetter("language"),
    }
    | prompt
    | llm1
    | StrOutputParser()
)

#query = "resume "  # je l'ai utiliser pour resumer
query="Combien de foyers en Alg√©rie sont connect√©s √† l‚ÄôInternet fixe ?"
retrieved_docs = retriever.invoke(query)
context = "\n\n".join([doc.page_content for doc in retrieved_docs])

result=chain.invoke({"context":context,"question": query, "language": "arabe"})

# Affichage des r√©sultats
print("üìù R√©ponse du LLM :")
print(result)

"""print("\nüìö Documents utilis√©s :")
for doc in retrieved_docs:
    print(doc.page_content)
"""
"""
# resume de mediamarketing :

Le nombre de foyers connect√©s au r√©seau internet tr√®s haut d√©bit en fibre optique jusqu'au domicile (FTTH) a d√©pass√© le seuil de 1,5 million, a annonc√© samedi 12 octobre 2024, le minist√®re de la Poste et des T√©l√©communications dans un communiqu√©. ""Cette √©volution quantitative s'accompagne d'une am√©lioration qualitative de la vitesse de d√©bit disponible pour les abonn√©s"", rel√®ve le communiqu√©, soulignant qu'Alg√©rie T√©l√©com a lanc√© des offres promotionnelles pour ceux souhaitant b√©n√©ficier de d√©bits √©lev√©s allant jusqu'√† 1 Gigabit/seconde sur demande"". Le nombre total de foyers connect√©s au r√©seau internet fixe, est pass√© de 3,5 millions au d√©but de l'ann√©e 2020 √† 5,8 millions en octobre 2024."
"""