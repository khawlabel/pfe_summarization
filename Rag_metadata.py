from outils import *
from qdrant_client import QdrantClient
from langchain_groq import ChatGroq
from qdrant_client.models import VectorParams, Distance
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Qdrant
from langchain.chains import RetrievalQA
from constants import *
from operator import itemgetter
from langchain_core.output_parsers import StrOutputParser
from prompts import *
# Connexion √† Qdrant avec les variables charg√©es
client = QdrantClient(QDRANT_URL, api_key=QDRANT_API)

# Mod√®les Groq
llm1 = ChatGroq(groq_api_key=GROQ_API_KEY, model_name=LLM_NAME_1)
llm2 = ChatGroq(groq_api_key=GROQ_API_KEY, model_name=LLM_NAME_2)

# Charger le mod√®le d'embeddings
embedding_model = HuggingFaceEmbeddings(model_name=MODEL_EMBEDDING)

# R√©cup√©rer la dimension du mod√®le
vector_size = embedding_model.client.get_sentence_embedding_dimension()

if not client.collection_exists(QDRANT_COLLECTION):
   client.create_collection(
      collection_name=QDRANT_COLLECTION,
      vectors_config=VectorParams(size=vector_size, distance=Distance.COSINE),
   )

# Ajouter les documents √† Qdrant
vectorstore = Qdrant(
    client=client,
    collection_name=QDRANT_COLLECTION,
    embeddings=embedding_model,
)

info = client.get_collection(QDRANT_COLLECTION)
print(f"üìä Nombre de vecteurs enregistr√©s : {info.points_count}")


def process_and_store_file(file_path, lang):
    """Extrait le texte d'un fichier et l'ajoute dans Qdrant avec ses m√©tadonn√©es."""
    extracted_text = extract_text(file_path, lang)  # Fonction d'extraction

    if extracted_text:
        file_name = os.path.basename(file_path)
        file_extension = os.path.splitext(file_name)[-1].lower().replace('.', '')  # Type du fichier

        metadata = {
            "file_name": file_name,
            "file_type": file_extension,
        }

        vectorstore.add_texts([extracted_text], metadatas=[metadata])

        print(f"üì• Texte extrait et stock√© depuis {file_path} ‚úÖ")
    else:
        print(f"‚ö†Ô∏è Aucun texte extrait depuis {file_path} ‚ùå")

def retrieve_context_with_metadata(query):
    """R√©cup√®re les documents pertinents et int√®gre les m√©tadonn√©es dans le contexte."""
    retrieved_docs = retriever.invoke(query)

    formatted_context = "\n\n".join(
        [
            f"üìÇ Fichier: {doc.metadata.get('file_name', 'Inconnu')}\n"
            f"üìÑ Type: {doc.metadata.get('file_type', 'Inconnu')}\n"
            f"üîπ Contenu:\n{doc.page_content}"
            for doc in retrieved_docs
        ]
    )

    return formatted_context


number_of_sources=4
retriever = vectorstore.as_retriever(search_kwargs={"k": number_of_sources})

#qa_chain_1 = RetrievalQA.from_chain_type(llm=llm1, retriever=retriever, return_source_documents=True)
qa_chain_2 = RetrievalQA.from_chain_type(llm=llm2, retriever=retriever, return_source_documents=True)


# Exemple d'ajout de fichier
files=["pfe_summarization/data/ECHOUROUKELYAOUMI131020241a.pdf","pfe_summarization/data/ELDJAZAIRELDJADIDA131020241a.pdf","pfe_summarization/data/RadioOuargla141020241a.mp3","pfe_summarization/data/Eliktisadia131020241a.mp4"]

langue="ar"

"""for file in files:
    process_and_store_file(file,langue)
    print("file proccessed")

"""

chain_resumer = (
    {
        "context": itemgetter("context"),
        "language": itemgetter("language"),
    }
    | prompt_resumer
    | llm1
    | StrOutputParser()
)
chain_chat = (
    {
        "context": itemgetter("context"),
        "question": itemgetter("question"),
        "language": itemgetter("language"),
    }
    | prompt_chat
    | llm1
    | StrOutputParser()
)
# Demander le mode √† l'utilisateur
mode = input("Voulez-vous un r√©sum√© (1) ou poser une question (2) ? ").strip()
if mode == "1":
    query = "Fais un r√©sum√© clair et structur√© des informations disponibles dans les sources."

    context = retrieve_context_with_metadata(query)

    result = chain_resumer.invoke({"context": context, "language":"francais"})

    print("\nüìù R√©sum√© g√©n√©r√© :")
    print(result)
elif mode == "2":
    query = "dis moi de quoi parle chaque fichier ?"
    context = retrieve_context_with_metadata(query)

    result = chain_chat.invoke({"context": context,"question": query, "language": "arabe"})

    print("\nü§ñ R√©ponse du LLM :")
    print(result)


"""
print("\nüìö Documents utilis√©s :")
for doc in retrieved_docs:
    print(doc.page_content)
"""
"""
#titre :
Plus de 1,5 million de foyers connect√©s au FTTH en Alg√©rie.

# resume de mediamarketing :

Le nombre de foyers connect√©s au r√©seau internet tr√®s haut d√©bit en fibre optique jusqu'au domicile
 (FTTH) a d√©pass√© le seuil de 1,5 million, a annonc√© samedi 12 octobre 2024, le minist√®re de
   la Poste et des T√©l√©communications dans un communiqu√©. ""Cette √©volution quantitative
     s'accompagne d'une am√©lioration qualitative de la vitesse de d√©bit disponible pour les 
     abonn√©s"", rel√®ve le communiqu√©, soulignant qu'Alg√©rie T√©l√©com a lanc√© des offres 
     promotionnelles pour ceux souhaitant b√©n√©ficier de d√©bits √©lev√©s allant jusqu'√† 1 
     Gigabit/seconde sur demande"". Le nombre total de foyers connect√©s au r√©seau internet fixe, 
     est pass√© de 3,5 millions au d√©but de l'ann√©e 2020 √† 5,8 millions en octobre 2024."
"""
